let hello = function() {
  return "안녕하세요 여러분";
}; //함수 표현식
// => 무명함수를 변수에 담아서 활용하는 방식


function helloFunc() {
  return "안녕하세요 여러분";
}; // 함수 선언식


console.log(hello); // [Function: hello]
// 변수가 함수를 담을 수 있다.
const helloText = hello();
console.log(helloText); // 안녕하세요 여러분
/**
 * helloText에 hello 함수를 실행한 결과값이 담기면서 
 * helloText를 콘솔로 찍어보면 "안녕하세요 여러분"이 나오게 된다.
 * 
 * 즉, hello 함수를 실행한 결괏값이 helloText에 담기는 것이다.
 */



// -------------------------------------------------------------------------
console.log(helloB());
/**
 * [호이스팅?]
 * 호이스팅이란 함수 실행 전에 
 * 함수 선언식으로 쓰여진 함수를 코드의 최상단으로 끌어올려 실행시키는 것이다.
 * 
 * => 자바스크립트 엔진이 함수를 읽어올때 끌어올려 실행시키는 것으로
 * 함수 선언식으로 작성된 함수들은 아무리 밑에 있어도 잘 실행된다.
 */

console.log(helloA()); // 호이스팅이 이뤄지지 않음
/**
 * [왜 helloA(함수 표현식)는 호이스팅이 되지 않는가?]
 * 함수 표현식은 함수 첫 줄에 이르러서 함수가 생성되므로 
 * 함수가 생성되기 전에는 함수에 작접적으로 접근이 불가능하다.
 * 
 * => 사용을 하고 싶다면 함수 코드가 다 생성된 뒤쪽에서 실행해야 한다.
 */

let helloA = function() {
  return "안녕하세요 여러분";
}; //함수 표현식

function helloB() {
  return "안녕하세요 여러분";
}; // 함수 선언식 **



// ------------------------------------------------------------------------------
// [더 간단한 함수 표현 방식 => 화살표 함수 **]
// : 함수 표현식을 더 빠르게 표기 가능하다.
let helloC = function() {
  return "안녕하세요 여러분";
};

let helloD = () => {
  return "안녕하세요 여러분";
  // 구현부분이 하나밖에 없다면 return을 제해줘도 된다.
};

let helloE = () => "안녕하세요 여러분";
// 화살표 함수 역시 호이스팅의 대상이 아니다 !
// => 순서 지켜야 함

//console.log(helloC());
//console.log(helloD());
console.log(helloE());
